- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`
- const getEntityName = (entity) => _.camelCase(entity.constructor.name)

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - entityName = getEntityName(entity)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.${entityName}.${propertyName}`)
    input(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName, '')
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin select(entity, propertyName, options, errors = {}, type, isNewTask = true)
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - entityName = getEntityName(entity)
  - selectedId = type === 'status' ? entity.statusId : entity.executorId
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for = inputId
    )= t(`views.${entityName}.${propertyName}`)
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
    )&attributes(attributes)
      if isNewTask
        option(value='' selected= true)
        each item in options
          option(value= item.id)
            = (type === 'status' ? item.name : `${item.firstName} ${item.lastName}`)
      else
        each item in options
          option(value= item.id selected=(item.id === selectedId))
            = (type === 'status' ? item.name : `${item.firstName} ${item.lastName}`)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin labelsSelect(entity, propertyName, options, selectedLabelIds = [], errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  - entityName = getEntityName(entity)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for = inputId
    )= t(`views.${entityName}.${propertyName}`)
    select(
      id= inputId
      name=getInputName(propertyName)
      class=classLine
      multiple='multiple'
    )&attributes(attributes)
      each item in options
        option(value= item.id selected= (selectedLabelsIds.includes(item.id)))
          = item.name
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(form = null)
  input(class='btn btn-primary' type='submit')&attributes(attributes)

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)